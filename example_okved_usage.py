#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –û–ö–í–≠–î –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OKVEDAnalyzer –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
CSV —Ñ–∞–π–ª–∞ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–¥–æ–≤ –û–ö–í–≠–î.
"""

from okved_analyzer import OKVEDAnalyzer
import pandas as pd
import logging

def analyze_parsed_news_example():
    """
    –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
    """
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å CSV —Ñ–∞–π–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
    # –§–æ—Ä–º–∞—Ç: id, title, text, date, source, found_companies, sentiment, sentiment_score
    
    input_csv = "parsed_articles_2024-01-01_2024-01-31_–±–∞–Ω–∫–∏.csv"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ñ–∞–π–ª
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –û–ö–í–≠–î
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –û–ö–í–≠–î...")
        analyzer = OKVEDAnalyzer(similarity_threshold=0.25)  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ 0.25
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏
        print("–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π...")
        results = analyzer.analyze_news_csv(input_csv)
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_news = len(results['news_id'].unique())
        news_with_okved = len(results[results['okved_code'] != '']['news_id'].unique())
        total_okved_matches = len(results[results['okved_code'] != ''])
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ù–ê–õ–ò–ó–ê:")
        print(f"–í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {total_news}")
        print(f"–ù–æ–≤–æ—Å—Ç–µ–π —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏ –û–ö–í–≠–î: {news_with_okved}")
        print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –û–ö–í–≠–î: {total_okved_matches}")
        print(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤ –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {total_okved_matches / news_with_okved:.2f}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏—Ö—Å—è –∫–æ–¥–æ–≤ –û–ö–í–≠–î
        if total_okved_matches > 0:
            top_codes = results[results['okved_code'] != '']['okved_code'].value_counts().head()
            print(f"\nüèÜ –¢–û–ü-5 –ù–ê–ò–ë–û–õ–ï–ï –ß–ê–°–¢–´–• –ö–û–î–û–í –û–ö–í–≠–î:")
            for code, count in top_codes.items():
                description = results[results['okved_code'] == code]['okved_description'].iloc[0]
                print(f"{code}: {count} —Ä–∞–∑ - {description[:100]}...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        print(f"\nüì∞ –ü–†–ò–ú–ï–†–´ –ê–ù–ê–õ–ò–ó–ê:")
        sample_results = results[results['okved_code'] != ''].head(3)
        for _, row in sample_results.iterrows():
            print(f"\n–ù–æ–≤–æ—Å—Ç—å: {row['news_title'][:100]}...")
            print(f"–û–ö–í–≠–î: {row['okved_code']} - {row['okved_description']}")
            print(f"–°—Ö–æ–∂–µ—Å—Ç—å: {row['similarity_score']}")
        
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {input_csv} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è CSV —Ñ–∞–π–ª–∞ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")

def test_single_news_analysis():
    """
    –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
    """
    print("\nüîç –¢–ï–°–¢ –ê–ù–ê–õ–ò–ó–ê –û–¢–î–ï–õ–¨–ù–û–ô –ù–û–í–û–°–¢–ò:")
    
    # –ü—Ä–∏–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏ –æ –±–∞–Ω–∫–∞—Ö
    news_title = "–°–±–µ—Ä–±–∞–Ω–∫ —É–≤–µ–ª–∏—á–∏–ª –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –ø–æ –≤–∫–ª–∞–¥–∞–º"
    news_text = """
    –ö—Ä—É–ø–Ω–µ–π—à–∏–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –±–∞–Ω–∫ –°–±–µ—Ä–±–∞–Ω–∫ –æ–±—ä—è–≤–∏–ª –æ–± —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ 
    –ø–æ —Å—Ä–æ—á–Ω—ã–º –≤–∫–ª–∞–¥–∞–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü. –ù–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏ –≤—Å—Ç—É–ø–∞—é—Ç –≤ —Å–∏–ª—É —Å 1 —Ñ–µ–≤—Ä–∞–ª—è. 
    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –ø–æ —Ä—É–±–ª–µ–≤—ã–º –≤–∫–ª–∞–¥–∞–º —Å–æ—Å—Ç–∞–≤–∏—Ç 8.5% –≥–æ–¥–æ–≤—ã—Ö. 
    –ë–∞–Ω–∫ —Ç–∞–∫–∂–µ —Ä–∞—Å—à–∏—Ä–∏–ª –ª–∏–Ω–µ–π–∫—É –¥–µ–ø–æ–∑–∏—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.
    """
    
    try:
        analyzer = OKVEDAnalyzer(similarity_threshold=0.2)
        relevant_codes = analyzer.find_relevant_okved_codes(news_text, news_title, top_k=3)
        
        print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {news_title}")
        print(f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–¥–æ–≤ –û–ö–í–≠–î: {len(relevant_codes)}")
        
        for i, code_info in enumerate(relevant_codes, 1):
            print(f"\n{i}. –ö–æ–¥ –û–ö–í–≠–î: {code_info['okved_code']}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {code_info['okved_description']}")
            print(f"   –°—Ö–æ–∂–µ—Å—Ç—å: {code_info['similarity_score']}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def create_sample_csv():
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä CSV —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    sample_data = [
        {
            'id': '1',
            'title': '–°–±–µ—Ä–±–∞–Ω–∫ –∑–∞–ø—É—Å—Ç–∏–ª –Ω–æ–≤—É—é –∫—Ä–µ–¥–∏—Ç–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É',
            'text': '–ö—Ä—É–ø–Ω–µ–π—à–∏–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –±–∞–Ω–∫ –°–±–µ—Ä–±–∞–Ω–∫ –æ–±—ä—è–≤–∏–ª –æ –∑–∞–ø—É—Å–∫–µ –Ω–æ–≤–æ–π –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –º–∞–ª–æ–≥–æ –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –°—Ç–∞–≤–∫–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º —Å–Ω–∏–∂–µ–Ω—ã –¥–æ 12% –≥–æ–¥–æ–≤—ã—Ö.',
            'date': '2024-01-15',
            'source': 'RBC.ru',
            'found_companies': "['–°–±–µ—Ä–±–∞–Ω–∫']",
            'sentiment': '–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è',
            'sentiment_score': 0.75
        },
        {
            'id': '2', 
            'title': '–ê–≤—Ç–æ–≤–∞–∑ –æ–±—ä—è–≤–∏–ª –æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞',
            'text': '–ö—Ä—É–ø–Ω–µ–π—à–∏–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –∞–≤—Ç–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –ê–≤—Ç–æ–≤–∞–∑ —Å–æ–æ–±—â–∏–ª –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏ –æ–±—ä–µ–º–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏–∑-–∑–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö.',
            'date': '2024-01-16',
            'source': 'RBC.ru',
            'found_companies': "['–ê–≤—Ç–æ–≤–∞–∑']",
            'sentiment': '–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è',
            'sentiment_score': 0.25
        },
        {
            'id': '3',
            'title': '–†–æ—Å—Ç —Ü–µ–Ω –Ω–∞ –Ω–µ—Ñ—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∞–ª —Ä—É–±–ª—å',
            'text': '–¶–µ–Ω—ã –Ω–∞ –Ω–µ—Ñ—Ç—å –º–∞—Ä–∫–∏ Brent –≤—ã—Ä–æ—Å–ª–∏ –¥–æ 85 –¥–æ–ª–ª–∞—Ä–æ–≤ –∑–∞ –±–∞—Ä—Ä–µ–ª—å, —á—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∞–ª–æ –∫—É—Ä—Å —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—É–±–ª—è. –≠–∫—Å–ø–µ—Ä—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é—Ç –¥–∞–ª—å–Ω–µ–π—à–µ–µ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã.',
            'date': '2024-01-17',
            'source': 'RBC.ru', 
            'found_companies': "[]",
            'sentiment': '–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è',
            'sentiment_score': 0.68
        }
    ]
    
    df = pd.DataFrame(sample_data)
    filename = 'sample_news_for_okved_test.csv'
    df.to_csv(filename, index=False, encoding='utf-8')
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {filename}")
    return filename

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    """
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê –û–ö–í–≠–î")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
    test_single_news_analysis()
    
    print("\n" + "=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ
    print("\nüìù –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –§–ê–ô–õ–ê –ò –ê–ù–ê–õ–ò–ó:")
    sample_file = create_sample_csv()
    
    try:
        analyzer = OKVEDAnalyzer(similarity_threshold=0.2)
        results = analyzer.analyze_news_csv(sample_file)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:")
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(results['news_id'].unique())}")
        print(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {len(results[results['okved_code'] != ''])}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç–∏
        for news_id in results['news_id'].unique():
            news_results = results[results['news_id'] == news_id]
            news_title = news_results['news_title'].iloc[0]
            print(f"\n–ù–æ–≤–æ—Å—Ç—å {news_id}: {news_title[:80]}...")
            
            relevant_codes = news_results[news_results['okved_code'] != '']
            if len(relevant_codes) > 0:
                for _, row in relevant_codes.iterrows():
                    print(f"  - {row['okved_code']}: {row['okved_description'][:60]}... (—Å—Ö–æ–∂–µ—Å—Ç—å: {row['similarity_score']})")
            else:
                print("  - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–¥—ã –û–ö–í–≠–î –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
    
    print("\n" + "=" * 50)
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\n–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("python okved_analyzer.py <–ø—É—Ç—å_–∫_–≤–∞—à–µ–º—É_csv_—Ñ–∞–π–ª—É>")

if __name__ == "__main__":
    main() 